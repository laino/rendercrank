{"version":3,"file":"rendercrank.production.js","mappings":"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","sources":["webpack://RenderCrank/webpack/universalModuleDefinition","webpack://RenderCrank/webpack/bootstrap","webpack://RenderCrank/webpack/runtime/define property getters","webpack://RenderCrank/webpack/runtime/hasOwnProperty shorthand","webpack://RenderCrank/webpack/runtime/make namespace object","webpack://RenderCrank/./lib/core/command.ts","webpack://RenderCrank/./lib/core/resource.ts","webpack://RenderCrank/./lib/core/instructor.ts","webpack://RenderCrank/./lib/core/renderer.ts","webpack://RenderCrank/./lib/core/protocol.ts","webpack://RenderCrank/./lib/resources/buffer.ts","webpack://RenderCrank/./lib/resources/program.ts","webpack://RenderCrank/./lib/render-context.ts","webpack://RenderCrank/./lib/commands/run-program.ts","webpack://RenderCrank/./lib/programs/colored-triangles.ts","webpack://RenderCrank/./lib/render-target.ts","webpack://RenderCrank/./lib/component.ts","webpack://RenderCrank/./lib/single-threaded-renderer.ts","webpack://RenderCrank/./lib/index.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"RenderCrank\"] = factory();\n\telse\n\t\troot[\"RenderCrank\"] = factory();\n})(self, function() {\nreturn ","// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { Renderer } from './renderer';\nimport { ProtocolReader, ProtocolWriter } from './protocol';\nimport { Instructor } from './instructor';\n\nexport const COMMAND_MAP: Record<string, Command> = {};\n\nexport interface Command<A extends any[] = any[]> {\n    name: string;\n\n    submit(instructor: Instructor, protocol: ProtocolWriter, ... args: A): void;\n\n    render(protocol: ProtocolReader, renderer: Renderer);\n}\n\nexport function Command<A extends any[]>(def: Command<A>): Command<A> {\n    if (Object.prototype.hasOwnProperty.call(COMMAND_MAP, def.name)) {\n        throw new Error(`A command with the name ${def.name} is already registered.`);\n    }\n\n    COMMAND_MAP[def.name] = def;\n\n    return def;\n}\n","import { ProtocolReader, ProtocolWriter } from './protocol';\nimport { Renderer } from './renderer';\n\nexport const RESOURCE_MAP: Record<string, typeof Resource> = {};\n\nexport function registerResourceType(resource: typeof Resource) {\n    const name = resource.resourceName;\n\n    if (name === 'Resource') {\n        throw new Error(`Resource name can't be \"Resource\".`);\n    }\n\n    if (Object.prototype.hasOwnProperty.call(RESOURCE_MAP, name)) {\n        throw new Error(`A resource type with the name ${name} is already registered.`);\n    }\n\n    RESOURCE_MAP[name] = resource;\n}\n\nexport enum ResourceState {\n    UNLOADED,\n    LOADING,\n    LOAD_ABORTED,\n    LOADED,\n    READY,\n}\n\nlet RESOURCE_ID_COUNTER = 0;\n\nexport type ResourceID = number;\nexport namespace ResourceID {\n    export function nextID(): ResourceID {\n        return RESOURCE_ID_COUNTER++;\n    }\n}\n\nexport abstract class ResourceRef {\n    public readonly id: ResourceID = ResourceID.nextID();\n\n    public state: ResourceState = ResourceState.UNLOADED;\n    public refcount = 0;\n    public needsUpdate = false;\n\n    public constructor(public readonly type: typeof Resource) {\n    }\n\n    public load(): Promise<void> | void {\n        // overwrite\n    }\n\n    public writeData(protocol: ProtocolWriter) {\n        // overwrite\n    }\n\n    public writeUpdate(protocol: ProtocolWriter) {\n        // overwrite\n    }\n\n    public onUnload() {\n        // overwrite\n        this.needsUpdate = false;\n    }\n}\n\nexport abstract class Resource {\n    static readonly resourceName: string = 'Resource';\n\n    public constructor(public renderer: Renderer) {\n    }\n\n    public abstract load(protocol: ProtocolReader);\n    public abstract update(protocol: ProtocolReader);\n    public abstract unload();\n}\n","import { ProtocolWriter } from './protocol';\nimport { ResourceRef, ResourceState } from './resource';\nimport { Command, COMMAND_MAP } from './command';\n\nexport enum Instruction {\n    STOP,\n    RUN_COMMAND,\n    MAP_COMMAND,\n    UPDATE_RESOURCE,\n    LOAD_RESOURCE,\n    UNLOAD_RESOURCE,\n    ADVANCE\n}\n\nexport class Instructor {\n    private mappedCommands: Record<string, number> = {};\n\n    public resources = new Set<ResourceRef>();\n\n    private commandProtocol: ProtocolWriter;\n\n    public constructor(private protocol: ProtocolWriter) {\n        let index = 0;\n\n        for (const command of Object.values(COMMAND_MAP)) {\n            protocol.writeUInt8(Instruction.MAP_COMMAND);\n            protocol.writeUInt8(index);\n            protocol.writeString(command.name);\n\n            this.mappedCommands[command.name] = index;\n\n            index++;\n        }\n\n        this.commandProtocol = protocol.createWriter();\n    }\n\n    public command<C extends Command>(command: C, ... args: C extends Command<infer A> ? A : never) {\n        const commandProtocol = this.commandProtocol;\n\n        commandProtocol.writeUInt8(Instruction.RUN_COMMAND);\n\n        command.submit(this, commandProtocol, ...args);\n    }\n\n    public finish() {\n        this.commandProtocol.writeUInt8(Instruction.STOP);\n\n        const commandData = this.commandProtocol.flush();\n        const protocol = this.protocol;\n\n        protocol.writeUInt8(Instruction.ADVANCE);\n\n        protocol.advance();\n\n        for (const data of commandData) {\n            protocol.passData(data);\n        }\n    }\n\n    public loadResource(resource: ResourceRef) {\n        const protocol = this.protocol;\n\n        this.resources.add(resource);\n\n        if (resource.state === ResourceState.LOAD_ABORTED) {\n            resource.state = ResourceState.LOADING;\n            return;\n        }\n\n        if (resource.state === ResourceState.UNLOADED) {\n            resource.state = ResourceState.LOADING;\n\n            const result = resource.load();\n\n            if (result) {\n                result.then(() => {\n                    if (resource.state === ResourceState.LOAD_ABORTED) {\n                        resource.onUnload();\n                        resource.state = ResourceState.UNLOADED;\n                    } else {\n                        resource.state = ResourceState.LOADED;\n                    }\n                });\n                return;\n            }\n\n            resource.state = ResourceState.LOADED;\n        }\n\n        if (resource.state === ResourceState.LOADED) {\n            protocol.writeUInt8(Instruction.LOAD_RESOURCE);\n            protocol.writeUInt32(resource.id);\n            protocol.writeString(resource.type.resourceName);\n            resource.writeData(protocol);\n\n            resource.state = ResourceState.READY;\n        }\n\n        if (resource.state === ResourceState.READY && resource.needsUpdate) {\n            resource.needsUpdate = false;\n            protocol.writeUInt8(Instruction.UPDATE_RESOURCE);\n            protocol.writeUInt32(resource.id);\n            resource.writeUpdate(protocol);\n        }\n    }\n\n    public unloadResource(resource: ResourceRef) {\n        const protocol = this.protocol;\n\n        if (resource.refcount > 0 || resource.state === ResourceState.UNLOADED) {\n            return;\n        }\n\n        if (resource.state === ResourceState.READY) {\n            protocol.writeUInt8(Instruction.UNLOAD_RESOURCE);\n            protocol.writeUInt32(resource.id);\n        }\n\n        if (resource.state !== ResourceState.LOADING) {\n            resource.onUnload();\n        }\n\n        resource.state = ResourceState.UNLOADED;\n    }\n\n}\n","import { Command, COMMAND_MAP } from './command';\nimport { Resource, ResourceID, RESOURCE_MAP } from './resource';\nimport { Instruction } from './instructor';\nimport { ProtocolReader } from './protocol';\n\nconst DEBUG = true;\n\nexport interface Renderer {\n    gl: WebGL2RenderingContext;\n\n    getResource<T extends typeof Resource>(id: ResourceID, type: T): InstanceType<T>;\n\n    render(protocol: ProtocolReader);\n}\n\nexport class CanvasRenderer implements Renderer {\n    public gl: WebGL2RenderingContext;\n\n    private resources = new Map<number, Resource>();\n\n    public constructor(public canvas: HTMLCanvasElement) {\n        this.gl = canvas.getContext('webgl2');\n    }\n\n    public getResource<T extends typeof Resource>(id: ResourceID, type: T) {\n        const resource = this.resources.get(id);\n\n        if (!resource) {\n            return null;\n        }\n\n        if (DEBUG) {\n            if (!(resource instanceof type)) {\n                throw new Error(`Resource has incorrect type!`);\n            }\n        }\n\n        return resource as InstanceType<T>;\n    }\n\n    public render(protocol: ProtocolReader) {\n        const resources = this.resources;\n\n        const commandMap: Command[] = Array(256);\n\n        let action: number;\n        while ((action = protocol.readUInt8()) !== Instruction.STOP) {\n            if (action === Instruction.RUN_COMMAND) {\n                const id = protocol.readUInt8();\n\n                commandMap[id].render(protocol, this);\n\n                continue;\n            }\n\n            if (action === Instruction.MAP_COMMAND) {\n                const id = protocol.readUInt8();\n                const commandName = protocol.readString();\n\n                const command = COMMAND_MAP[commandName];\n\n                if (!command) {\n                    throw new Error(`Command ${commandName} not registered`);\n                }\n\n                commandMap[id] = command;\n\n                continue;\n            }\n\n            if (action === Instruction.UPDATE_RESOURCE) {\n                const id = protocol.readUInt32();\n\n                const resource = this.resources.get(id);\n\n                resource.update(protocol);\n\n                continue;\n            }\n\n            if (action === Instruction.LOAD_RESOURCE) {\n                const id = protocol.readUInt32();\n                const name = protocol.readString();\n\n                const resource: Resource = new (RESOURCE_MAP[name] as any)(this);\n\n                resources.set(id, resource);\n\n                resource.load(protocol);\n\n                continue;\n            }\n\n            if (action === Instruction.UNLOAD_RESOURCE) {\n                const id = protocol.readUInt32();\n\n                const resource = this.resources.get(id);\n\n                resource.unload();\n\n                this.resources.delete(id);\n\n                continue;\n            }\n\n            if (action === Instruction.ADVANCE) {\n                protocol.advance();\n                continue;\n            }\n        }\n    }\n}\n","const DEFAULT_BUFFER_SIZE = 1024;\nconst MAX_INLINE_STRING_LENGTH = 128;\n\nconst IS_LITTLE_ENDIAN =\n    ((new Uint32Array((new Uint8Array([1,2,3,4])).buffer))[0] === 0x04030201);\n\nexport abstract class ProtocolWriter {\n    private textEncoder = new TextEncoder();\n\n    protected writeBuffer: ArrayBuffer;\n    protected writeView: DataView;\n    protected writeOffset: number;\n\n    public constructor(public readonly shared = false) {}\n\n    protected abstract allocate(amount: number, align: number): number;\n\n    public abstract createWriter(): ProtocolWriter;\n    public abstract advance();\n    public abstract passData(data: ArrayBufferLike);\n    public abstract flush(): ArrayBuffer[];\n\n    public writeString(str: string) {\n        const encoded = this.textEncoder.encode(str);\n\n        this.writeUInt32(encoded.length);\n\n        if (encoded.length > MAX_INLINE_STRING_LENGTH) {\n            this.passData(encoded.buffer);\n        } else {\n            this.writeUInt8Array(encoded);\n        }\n    }\n\n    public writeFloat32(num: number) {\n        const offset = this.allocate(4, 4);\n        this.writeView.setFloat32(offset, num, IS_LITTLE_ENDIAN);\n    }\n\n    public writeFloat64(num: number) {\n        const offset = this.allocate(8, 8);\n        this.writeView.setFloat64(offset, num, IS_LITTLE_ENDIAN);\n    }\n\n    public writeInt8(num: number) {\n        const offset = this.allocate(1, 1);\n        this.writeView.setInt8(offset, num);\n    }\n\n    public writeInt16(num: number) {\n        const offset = this.allocate(2, 2);\n        this.writeView.setInt16(offset, num, IS_LITTLE_ENDIAN);\n    }\n\n    public writeInt32(num: number) {\n        const offset = this.allocate(4, 4);\n        this.writeView.setInt32(offset, num, IS_LITTLE_ENDIAN);\n    }\n\n    public writeUInt8(num: number) {\n        const offset = this.allocate(1, 1);\n        this.writeView.setUint8(offset, num);\n    }\n\n    public writeUInt16(num: number) {\n        const offset = this.allocate(2, 2);\n        this.writeView.setUint16(offset, num, IS_LITTLE_ENDIAN);\n    }\n\n    public writeUInt32(num: number) {\n        const offset = this.allocate(4, 4);\n        this.writeView.setUint32(offset, num, IS_LITTLE_ENDIAN);\n    }\n\n    public writeFloat32Array(arr: ArrayLike<number>) {\n        const offset = this.allocate(arr.length * 4, 4);\n        for (let i = 0, size = arr.length; i < size; i++) {\n            this.writeView.setFloat32(offset + i * 4, arr[i], IS_LITTLE_ENDIAN);\n        }\n    }\n\n    public writeFloat64Array(arr: ArrayLike<number>) {\n        const offset = this.allocate(arr.length * 8, 8);\n        for (let i = 0, size = arr.length; i < size; i++) {\n            this.writeView.setFloat64(offset + i * 8, arr[i], IS_LITTLE_ENDIAN);\n        }\n    }\n\n    public writeInt8Array(arr: ArrayLike<number>) {\n        const offset = this.allocate(arr.length, 1);\n        for (let i = 0, size = arr.length; i < size; i++) {\n            this.writeView.setInt8(offset + i, arr[i]);\n        }\n    }\n\n    public writeInt16Array(arr: ArrayLike<number>) {\n        const offset = this.allocate(arr.length * 2, 2);\n        for (let i = 0, size = arr.length; i < size; i++) {\n            this.writeView.setInt16(offset + i * 2, arr[i], IS_LITTLE_ENDIAN);\n        }\n    }\n\n    public writeInt32Array(arr: ArrayLike<number>) {\n        const offset = this.allocate(arr.length * 4, 4);\n        for (let i = 0, size = arr.length; i < size; i++) {\n            this.writeView.setInt32(offset + i * 4, arr[i], IS_LITTLE_ENDIAN);\n        }\n    }\n\n    public writeUInt8Array(arr: ArrayLike<number>) {\n        const offset = this.allocate(arr.length, 1);\n        for (let i = 0, size = arr.length; i < size; i++) {\n            this.writeView.setUint8(offset + i, arr[i]);\n        }\n    }\n\n    public writeUInt16Array(arr: ArrayLike<number>) {\n        const offset = this.allocate(arr.length * 2, 2);\n        for (let i = 0, size = arr.length; i < size; i++) {\n            this.writeView.setUint16(offset + i * 2, arr[i], IS_LITTLE_ENDIAN);\n        }\n    }\n\n    public writeUInt32Array(arr: ArrayLike<number>) {\n        const offset = this.allocate(arr.length * 4, 4);\n        for (let i = 0, size = arr.length; i < size; i++) {\n            this.writeView.setUint32(offset + i * 4, arr[i], IS_LITTLE_ENDIAN);\n        }\n    }\n}\n\nexport abstract class ProtocolReader {\n    private textDecoder = new TextDecoder('utf8');\n\n    protected readBuffer: ArrayBuffer;\n    protected readView: DataView;\n    protected readOffset: number;\n\n    public constructor(public readonly shared = false) {\n    }\n\n    protected abstract prepareRead(amount: number, align: number): number;\n\n    public abstract getData(): ArrayBufferLike;\n    public abstract advance();\n\n    public readString() {\n        const length = this.readUInt32();\n\n        let data: ArrayBuffer;\n\n        if (length > MAX_INLINE_STRING_LENGTH) {\n            data = this.getData();\n        } else {\n            data = this.readUInt8Array(length);\n        }\n\n        return this.textDecoder.decode(data);\n    }\n\n\n    public readFloat32() {\n        const offset = this.prepareRead(4, 4);\n        return this.readView.getFloat32(offset, IS_LITTLE_ENDIAN);\n    }\n\n    public readFloat64() {\n        const offset = this.prepareRead(8, 8);\n        return this.readView.getFloat64(offset, IS_LITTLE_ENDIAN);\n    }\n\n    public readInt8() {\n        const offset = this.prepareRead(1, 1);\n        return this.readView.getInt8(offset);\n    }\n\n    public readInt16() {\n        const offset = this.prepareRead(2, 2);\n        return this.readView.getInt16(offset, IS_LITTLE_ENDIAN);\n    }\n\n    public readInt32() {\n        const offset = this.prepareRead(4, 4);\n        return this.readView.getInt32(offset, IS_LITTLE_ENDIAN);\n    }\n\n    public readUInt8() {\n        const offset = this.prepareRead(1, 1);\n        return this.readView.getUint8(offset);\n    }\n\n    public readUInt16() {\n        const offset = this.prepareRead(2, 2);\n        return this.readView.getUint16(offset, IS_LITTLE_ENDIAN);\n    }\n\n    public readUInt32() {\n        const offset = this.prepareRead(4, 4);\n        return this.readView.getUint32(offset, IS_LITTLE_ENDIAN);\n    }\n\n    public readFloat32Array(amount: number) {\n        const offset = this.prepareRead(amount * 4, 4);\n        return new Float32Array(this.readBuffer, offset, amount);\n    }\n\n    public readFloat64Array(amount: number) {\n        const offset = this.prepareRead(amount * 8, 8);\n        return new Float64Array(this.readBuffer, offset, amount);\n    }\n\n    public readInt8Array(amount: number) {\n        const offset = this.prepareRead(amount, 1);\n        return new Int8Array(this.readBuffer, offset, amount);\n    }\n\n    public readInt16Array(amount: number) {\n        const offset = this.prepareRead(amount * 2, 2);\n        return new Int16Array(this.readBuffer, offset, amount);\n    }\n\n    public readInt32Array(amount: number) {\n        const offset = this.prepareRead(amount * 4, 4);\n        return new Int32Array(this.readBuffer, offset, amount);\n    }\n\n    public readUInt8Array(amount: number) {\n        const offset = this.prepareRead(amount, 1);\n        return new Uint8Array(this.readBuffer, offset, amount);\n    }\n\n    public readUInt16Array(amount: number) {\n        const offset = this.prepareRead(amount * 2, 2);\n        return new Uint16Array(this.readBuffer, offset, amount);\n    }\n\n    public readUInt32Array(amount: number) {\n        const offset = this.prepareRead(amount * 4, 4);\n        return new Uint32Array(this.readBuffer, offset, amount);\n    }\n}\n\nclass ProtocolBufferAllocator {\n    private buffers: ArrayBuffer[] = [];\n    private bufferIndex = -1;\n\n    public allocate(amount: number) {\n        this.bufferIndex++;\n\n        if (this.bufferIndex === this.buffers.length) {\n            const buffer = new ArrayBuffer(Math.max(amount, DEFAULT_BUFFER_SIZE));\n            this.buffers.push(buffer);\n            return buffer;\n        }\n\n        let buffer = this.buffers[this.bufferIndex];\n\n        if (buffer.byteLength < amount) {\n            this.buffers.push(buffer);\n\n            buffer = new ArrayBuffer(amount);\n\n            this.buffers[this.bufferIndex] = buffer;\n        }\n\n        return buffer;\n    }\n\n    public return(arr: ArrayBuffer[]) {\n        this.buffers.push(...arr);\n    }\n\n    public reset() {\n        this.buffers = [];\n        this.bufferIndex = 0;\n    }\n}\n\nexport class ArrayBufferProtocolWriter extends ProtocolWriter {\n    private writeBuffers: ArrayBuffer[] = [];\n\n    protected writeBuffer: ArrayBuffer;\n    protected writeView: DataView;\n    protected writeOffset = 0;\n\n    public constructor(\n            shared = false,\n            private allocator: ProtocolBufferAllocator = new ProtocolBufferAllocator(),\n    ) {\n        super(shared);\n    }\n\n    public advance() {\n        this.writeBuffer = null;\n        this.writeView = null;\n        this.writeOffset = 0;\n    }\n\n    public passData(data: ArrayBuffer) {\n        this.writeBuffers.push(data);\n    }\n\n    public createWriter() {\n        return new ArrayBufferProtocolWriter(this.shared, this.allocator);\n    }\n\n    protected allocate(amount: number, align: number): number {\n        if (!this.writeBuffer) {\n            this.writeBuffer = this.allocator.allocate(amount);\n            this.writeView = new DataView(this.writeBuffer);\n            this.writeBuffers.push(this.writeBuffer);\n            this.writeOffset = amount;\n            return 0;\n        }\n\n        let offset = this.writeOffset;\n\n        if (align > 1) {\n            offset += align - offset % align;\n        }\n\n        const newOffset = offset + amount;\n\n        if (newOffset > this.writeBuffer.byteLength) {\n            this.advance();\n            return this.allocate(amount, align);\n        }\n\n        this.writeOffset = newOffset;\n\n        return offset;\n    }\n\n    public flush() {\n        const oldBuffers = this.writeBuffers;\n\n        this.writeBuffer = null;\n        this.writeView = null;\n        this.writeOffset = 0;\n        this.writeBuffers = [];\n\n        return oldBuffers;\n    }\n}\n\nexport class ArrayBufferProtocolReader extends ProtocolReader {\n    private readBuffers: ArrayBuffer[] = [];\n    private readBufferIndex = 0;\n\n    protected readBuffer: ArrayBuffer;\n    protected readView: DataView;\n    protected readOffset = 0;\n\n    public getData() {\n        return this.readBuffers[++this.readBufferIndex];\n    }\n\n    public advance() {\n        this.readBuffer = this.readBuffers[++this.readBufferIndex];\n        this.readView = new DataView(this.readBuffer);\n        this.readOffset = 0;\n    }\n\n    protected prepareRead(amount: number, align: number): number {\n        let offset = this.readOffset;\n\n        if (align > 1) {\n            offset += align - offset % align;\n        }\n\n        const newOffset = offset + amount;\n\n        if (newOffset > this.readBuffer.byteLength) {\n            this.advance();\n            return this.prepareRead(amount, align);\n        }\n\n        this.readOffset = newOffset;\n\n        return offset;\n    }\n\n    public receive(buffers: ArrayBuffer[]) {\n        const oldBuffers = this.readBuffers;\n\n        this.readBuffers = buffers;\n        this.readBufferIndex = 0;\n\n        this.readBuffer = buffers[0];\n\n        this.readView = this.readBuffer ? new DataView(this.readBuffer) : null;\n        this.readOffset = 0;\n\n        return oldBuffers;\n    }\n}\n","import { ProtocolReader, ProtocolWriter, Resource, ResourceRef } from '../core';\n\ninterface VertexBufferUpdate {\n    offset: number,\n    length: number,\n}\n\nexport interface ArrayBufferViewLike extends ArrayBufferView {\n    readonly BYTES_PER_ELEMENT: number;\n    readonly length: number;\n\n    set(data: ArrayLike<number>, offset: number): void;\n}\n\nexport interface ArrayBufferViewLikeType {\n    readonly BYTES_PER_ELEMENT: number;\n\n    new(buffer: ArrayBufferLike): ArrayBufferViewLike;\n    new(length: number): ArrayBufferViewLike;\n}\n\nexport class BufferRef extends ResourceRef {\n    private updates: VertexBufferUpdate[] = [];\n\n    private byteView: Uint8Array;\n\n    private isShared = false;\n\n    public readonly size: number;\n\n    public constructor(public buffer: ArrayBuffer) {\n        super(Buffer);\n\n        if (window.SharedArrayBuffer) {\n            this.isShared = buffer instanceof SharedArrayBuffer;\n        }\n\n        this.byteView = new Uint8Array(buffer);\n        this.size = buffer.byteLength;\n    }\n\n    public notify(offset: number, length: number) {\n        this.updates.push({\n            offset,\n            length\n        });\n\n        this.needsUpdate = true;\n    }\n\n    public writeData(protocol: ProtocolWriter) {\n        if (this.isShared || protocol.shared) {\n            protocol.writeUInt8(1);\n            protocol.passData(this.buffer);\n        } else {\n            protocol.writeUInt8(0);\n            protocol.writeUInt32(this.buffer.byteLength);\n            protocol.writeUInt8Array(this.byteView);\n        }\n    }\n\n    public writeUpdate(protocol: ProtocolWriter) {\n        const updates = this.updates;\n\n        protocol.writeUInt32(updates.length);\n\n        for (let i = 0; i < updates.length; i++) {\n            const {offset, length} = updates[i];\n\n            protocol.writeUInt32(offset);\n            protocol.writeUInt32(length);\n\n            if (this.isShared || protocol.shared) {\n                protocol.writeUInt8Array(this.byteView.subarray(offset, offset + length));\n            }\n        }\n\n        this.updates = [];\n    }\n\n    public onUnload() {\n        this.needsUpdate = false;\n        this.updates = [];\n    }\n}\n\nexport class Buffer extends Resource {\n    static resourceName = 'Buffer';\n\n    public buffer: WebGLBuffer;\n\n    private sharedBuffer: Uint8Array;\n\n    public load(protocol: ProtocolReader) {\n        let data: Uint8Array;\n\n        const isShared = !!protocol.readUInt8();\n\n        if (isShared) {\n            this.sharedBuffer = data = new Uint8Array(protocol.getData());\n        } else {\n            const length = protocol.readUInt32();\n            data = protocol.readUInt8Array(length);\n        }\n\n        const gl = this.renderer.gl;\n\n        const buffer = this.buffer = gl.createBuffer();\n\n        gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n\n        gl.bufferData(gl.ARRAY_BUFFER, data, gl.STATIC_DRAW);\n\n        gl.bindBuffer(gl.ARRAY_BUFFER, null);\n    }\n\n    public update(protocol: ProtocolReader) {\n        const gl = this.renderer.gl;\n\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.buffer);\n\n        const updateNumber = protocol.readUInt32();\n\n        for (let i = 0; i < updateNumber; i++) {\n            const offset = protocol.readUInt32();\n            const length = protocol.readUInt32();\n\n            if (this.sharedBuffer) {\n                gl.bufferSubData(gl.ARRAY_BUFFER, offset, protocol.readUInt8Array(length));\n            } else {\n                gl.bufferSubData(gl.ARRAY_BUFFER, offset, this.sharedBuffer, offset, length);\n            }\n        }\n\n        gl.bindBuffer(gl.ARRAY_BUFFER, null);\n    }\n\n    public unload() {\n        const gl = this.renderer.gl;\n\n        gl.deleteBuffer(this.buffer);\n\n        this.buffer = null;\n    }\n}\n","import { Resource, ResourceRef, ProtocolReader, ProtocolWriter } from '../core';\n\nconst PREAMBLE = \"#version 300 es\\nprecision highp float;\\n\";\n\nexport type AttributeType =\n    'float' |\n    'vec2' |\n    'vec3' |\n    'vec4' |\n    'mat2' |\n    'mat3' |\n    'mat4' |\n    'int' |\n    'ivec2' |\n    'ivec3' |\n    'ivec4' |\n    'uint' |\n    'uvec2' |\n    'uvec3' |\n    'uvec4';\n\nexport type UniformType =\n    AttributeType |\n    'bool' |\n    'bvec2' |\n    'bvec3' |\n    'bvec4';\n\nexport type AttributeMap = Record<string, AttributeType>;\nexport type UniformMap = Record<string, UniformType>;\n\nexport interface ProgramDefinition {\n    vertexShader?: string,\n    fragmentShader?: string,\n\n    attributes?: AttributeMap;\n    uniforms?: UniformMap;\n}\n\ninterface Attribute {\n    name: string,\n    type: AttributeType,\n    location: number\n}\n\ninterface Uniform {\n    name: string,\n    type: UniformType,\n    location: WebGLUniformLocation\n}\n\nexport class ProgramRef extends ResourceRef {\n    public constructor(private def: ProgramDefinition) {\n        super(Program);\n    }\n\n    public writeData(protocol: ProtocolWriter) {\n        protocol.writeString(JSON.stringify(this.def));\n    }\n}\n\nexport class Program extends Resource {\n    static resourceName = 'Program';\n\n    private attributes: Attribute[];\n    private uniforms: Uniform[];\n\n    private vertexShader: WebGLShader;\n    private fragmentShader: WebGLShader;\n    private program: WebGLProgram;\n\n    public load(protocol: ProtocolReader) {\n        const def: ProgramDefinition = JSON.parse(protocol.readString());\n\n        const gl = this.renderer.gl;\n\n        const attributes = def.attributes || {};\n        const uniforms = def.uniforms || {};\n\n        const vertexShaderSource = createVertexShaderCode(def.vertexShader, attributes, uniforms);\n        const fragmentShaderSource = createFragmentShaderCode(def.fragmentShader, uniforms);\n\n        const vertexShader = this.vertexShader = gl.createShader(gl.VERTEX_SHADER);\n\n        gl.shaderSource(vertexShader, vertexShaderSource);\n        gl.compileShader(vertexShader);\n\n        if (!gl.getShaderParameter(vertexShader, gl.COMPILE_STATUS)) {\n            throw new Error(gl.getShaderInfoLog(vertexShader));\n        }\n\n        const fragmentShader = this.fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);\n\n        gl.shaderSource(fragmentShader, fragmentShaderSource);\n        gl.compileShader(fragmentShader);\n\n        if (!gl.getShaderParameter(fragmentShader, gl.COMPILE_STATUS)) {\n            throw new Error(gl.getShaderInfoLog(fragmentShader));\n        }\n\n        const program = this.program = gl.createProgram();\n\n        gl.attachShader(program, vertexShader);\n        gl.attachShader(program, fragmentShader);\n\n        gl.linkProgram(program);\n\n        if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\n            throw new Error(gl.getProgramInfoLog(program));\n        }\n\n        this.attributes = Object.entries(attributes).map(([name, type]) => {\n            return {\n                name,\n                type,\n                location: gl.getAttribLocation(program, name)\n            };\n        });\n\n        this.uniforms = Object.entries(uniforms).map(([name, type]) => {\n            return {\n                name,\n                type,\n                location: gl.getUniformLocation(program, name)\n            };\n        });\n    }\n\n    public update() {\n        // noop\n    }\n\n    public unload() {\n        const gl = this.renderer.gl;\n\n        gl.deleteProgram(this.program);\n        gl.deleteShader(this.vertexShader);\n        gl.deleteShader(this.fragmentShader);\n\n        this.program = void 0;\n        this.vertexShader = void 0;\n        this.fragmentShader = void 0;\n    }\n}\n\nfunction createVertexShaderCode(body: string, attributes: AttributeMap, uniforms: UniformMap) {\n    return (\n        PREAMBLE +\n        createAttributes(attributes) +\n        createUniforms(uniforms) +\n        fixIndent(body)\n    );\n}\n\nfunction createFragmentShaderCode(body: string, uniforms: UniformMap) {\n    return (\n        PREAMBLE +\n        createUniforms(uniforms) +\n        fixIndent(body)\n    );\n}\n\nfunction createAttributes(attributes: AttributeMap) {\n    return Object.entries(attributes)\n        .map(_ => `in ${_[1]} ${_[0]};`)\n        .join('\\n') + '\\n';\n}\n\nfunction createUniforms(uniforms: UniformMap) {\n    return Object.entries(uniforms)\n        .map(_ => `uniform ${_[1]} ${_[0]};`)\n        .join('\\n') + '\\n';\n}\n\nconst firstCharRegExp = /[^ \\t]/;\nfunction fixIndent(body: string) {\n    const lines = body.split('\\n');\n\n    let minIndent = Infinity;\n\n    for (const line of lines) {\n        const match = line.match(firstCharRegExp);\n        const lineStart = match ? match.index : line.length;\n\n        minIndent = Math.min(minIndent, lineStart);\n    }\n\n    return lines.map((line) => {\n        return line.slice(minIndent);\n    }).join('\\n');\n}\n","import {\n    BufferRef,\n    ArrayBufferViewLike,\n    ArrayBufferViewLikeType\n} from './resources';\n\nlet CONTEXT_ID_COUNTER = 0;\n\nexport type RenderContextID = number;\nexport namespace RenderContextID {\n    export function nextID(): RenderContextID {\n        return CONTEXT_ID_COUNTER++;\n    }\n}\n\nexport class RenderContext {\n    public readonly id: RenderContextID = RenderContextID.nextID();\n\n    public bufferPool = new BufferPool(this);\n\n    public float32BufferPool = new BufferPoolView(this.bufferPool, Float32Array);\n}\n\nconst BUFFER_SIZE = 1024;\n\nclass BufferPoolView {\n    private currentBuffer: BufferRef;\n    private currentView: ArrayBufferViewLike;\n\n    public constructor(public pool: BufferPool, public type: ArrayBufferViewLikeType) {\n    }\n\n    public writeMultiData(multi: ArrayLike<number>[], totalLength: number) {\n        const ELEMENT_SIZE = this.type.BYTES_PER_ELEMENT;\n        const byteLength = totalLength * ELEMENT_SIZE;\n\n        const byteOffset = this.pool.allocateSpace(byteLength);\n\n        const buffer = this.pool.currentBuffer;\n\n        if (this.currentBuffer !== buffer) {\n            this.currentBuffer = buffer;\n            this.currentView = new this.type(buffer.buffer);\n        }\n\n        let writeOffset = byteOffset;\n\n        for (let i = 0; i < multi.length; i++) {\n            const data = multi[i];\n            this.currentView.set(data, writeOffset);\n            writeOffset += data.length * ELEMENT_SIZE;\n        }\n\n        return {\n            buffer,\n            byteOffset,\n            byteLength\n        };\n    }\n\n    public writeData(data: ArrayLike<number>) {\n        const ELEMENT_SIZE = this.type.BYTES_PER_ELEMENT;\n        const byteLength = data.length * ELEMENT_SIZE;\n        const byteOffset = this.pool.allocateSpace(byteLength);\n        const buffer = this.pool.currentBuffer;\n\n        if (this.currentBuffer !== buffer) {\n            this.currentBuffer = buffer;\n            this.currentView = new this.type(buffer.buffer);\n        }\n\n        this.currentView.set(data, byteOffset);\n\n        return {\n            buffer,\n            byteOffset,\n            byteLength\n        };\n    }\n}\n\nclass BufferPool {\n    private buffers: BufferRef[] = [];\n    private buffersIndex = 0;\n\n    public currentBuffer: BufferRef;\n    public currentBufferOffset = 0;\n\n    public constructor(public context: RenderContext) {\n    }\n\n    public reset() {\n        this.buffersIndex = 0;\n        this.currentBufferOffset = 0;\n    }\n\n    public allocateSpace(amount: number) {\n        if (this.buffersIndex >= this.buffers.length) {\n            this.currentBuffer = new BufferRef(new ArrayBuffer(Math.max(BUFFER_SIZE, amount)));\n            this.buffers.push(this.currentBuffer);\n        }\n\n        const nextOffset = this.currentBufferOffset + amount;\n\n        if (nextOffset > this.currentBuffer.size) {\n            if (this.currentBufferOffset === 0) {\n                // We didn't use this buffer. Replace it with one that fits.\n                this.currentBuffer = new BufferRef(new ArrayBuffer(Math.max(BUFFER_SIZE, amount)));\n                this.buffers[this.buffersIndex] = this.currentBuffer;\n            } else {\n                this.buffersIndex++;\n                this.currentBufferOffset = 0;\n                this.currentBuffer = this.buffers[this.buffersIndex];\n                return this.allocateSpace(amount);\n            }\n        }\n\n        const old = this.currentBufferOffset;\n\n        this.currentBufferOffset = nextOffset;\n\n        return old;\n    }\n}\n\n","import { ProtocolWriter, ProtocolReader, Renderer, Command, Instructor } from '../core';\nimport { ProgramRef, BufferRef, Program, Buffer } from '../resources';\n\nexport interface RunProgramOptions {\n    program: ProgramRef,\n    buffer: BufferRef,\n    offset: number,\n    length: number\n}\n\nexport const RunProgram = Command({\n    name: 'RunProgram',\n\n    submit(instructor: Instructor, protocol: ProtocolWriter, options: RunProgramOptions) {\n        const {program, buffer, offset, length} = options;\n\n        instructor.loadResource(program);\n        instructor.loadResource(buffer);\n\n        protocol.writeUInt32Array([program.id, buffer.id, offset, length]);\n    },\n\n    render(protocol: ProtocolReader, renderer: Renderer) {\n        const [\n            programId,\n            bufferId,\n            offset,\n            length\n        ] = protocol.readUInt32Array(4);\n\n        const program = renderer.getResource(programId, Program);\n        const buffer = renderer.getResource(bufferId, Buffer);\n\n        console.log(program, buffer);\n\n        if (!program || !buffer) {\n            return;\n        }\n    }\n});\n","import { ProgramRef } from '../resources';\n\nexport const ColoredTrianglesProgram = new ProgramRef({\n    attributes: {\n        color: 'vec4',\n        position: 'vec4',\n    },\n    vertexShader: `\n        out vec4 vColor;\n\n        void main() {\n            vColor = color;\n            gl_Position = position;\n        }\n    `,\n    fragmentShader: `\n        in vec4 vColor;\n         \n        out vec4 outColor;\n         \n        void main() {\n          outColor = vColor;\n        }\n    `,\n});\n","import { Instructor } from './core';\nimport { RenderContext } from './render-context';\n\nimport { ProgramRef } from './resources';\nimport { RunProgram } from './commands';\nimport { ColoredTrianglesProgram } from './programs';\n\nexport class RenderTarget {\n    public zIndex = 0;\n\n    private drawCallBatcher = new DrawCallBatcher();\n\n    public constructor(private context: RenderContext) {\n    }\n\n    public submit(instructor: Instructor) {\n        this.drawCallBatcher.submit(instructor);\n    }\n\n    public rect(x: number, y: number, width: number, height: number) {\n        const z = this.zIndex++;\n\n        this.triangles([\n            x,         y         , z,\n            x + width, y         , z,\n            x + width, y + height, z,\n            x,         y         , z,\n            x + width, y + height, z,\n            x        , y + height, z,\n        ]);\n    }\n\n    public triangles(data: number[]) {\n        this.drawCallBatcher.drawTriangles(this.context, ColoredTrianglesProgram, data);\n    }\n\n}\n\ninterface ProgramCall {\n    context: RenderContext,\n    program: ProgramRef,\n    triangles: number[][],\n    trianglesLength: number\n}\n\nexport class DrawCallBatcher {\n    private programs: Record<string, ProgramCall> = {};\n    private batchedPrograms: number[][] = [];\n\n    public drawTriangles(context: RenderContext, program: ProgramRef, data: number[]) {\n        const ID = `${context.id}:${program.id}`;\n\n        const batch = this.programs[ID];\n\n        if (!batch) {\n            this.programs[ID] = {\n                context,\n                program,\n                triangles: [data],\n                trianglesLength: data.length\n            };\n\n            return;\n        }\n\n        batch.triangles.push(data);\n        batch.trianglesLength += data.length;\n    }\n\n    public submit(instructor: Instructor) {\n        for (const {context, program, triangles, trianglesLength} of Object.values(this.programs)) {\n            const {\n                buffer,\n                byteOffset,\n            } = context.float32BufferPool.writeMultiData(triangles, trianglesLength);\n\n            instructor.command(RunProgram, {\n                program,\n                buffer,\n                offset: byteOffset,\n                length: trianglesLength\n            });\n        }\n    }\n}\n","import { ProtocolWriter, Instructor, ResourceRef } from './core';\n\nimport { RenderTarget } from './render-target';\nimport { RenderContext } from './render-context';\n\nexport type RenderFunction = (target: RenderTarget) => Promise<void> | void;\n\nexport class Component extends RenderContext {\n    private resources = new Set<ResourceRef>();\n    private renderTarget = new RenderTarget(this);\n\n    public constructor(public fn: RenderFunction) {\n        super();\n    }\n\n    public render(protocol: ProtocolWriter) {\n        this.fn(this.renderTarget);\n\n        const instructor = new Instructor(protocol);\n\n        this.renderTarget.submit(instructor);\n\n        for (const resource of instructor.resources) {\n            resource.refcount++;\n            this.resources.add(resource);\n        }\n\n        instructor.finish();\n    }\n\n    public unload(protocol: ProtocolWriter) {\n        const instructor = new Instructor(protocol);\n\n        for (const resource of this.resources) {\n            resource.refcount--;\n            instructor.unloadResource(resource);\n        }\n\n        instructor.finish();\n    }\n}\n","import { ArrayBufferProtocolWriter, ArrayBufferProtocolReader, CanvasRenderer } from './core';\nimport { Component } from './component';\n\n/*\n * Utility class to easily setup single threaded rendering.\n */\nexport class SingleThreadedCanvasRenderer extends CanvasRenderer {\n    private protocolWriter = new ArrayBufferProtocolWriter(true);\n    private protocolReader = new ArrayBufferProtocolReader(true);\n\n    public renderComponent(component: Component) {\n        component.render(this.protocolWriter);\n\n        const data = this.protocolWriter.flush();\n\n        this.protocolReader.receive(data);\n\n        this.render(this.protocolReader);\n    }\n\n    public unloadComponent(component: Component) {\n        component.unload(this.protocolWriter);\n\n        const data = this.protocolWriter.flush();\n\n        this.protocolReader.receive(data);\n\n        this.render(this.protocolReader);\n    }\n}\n","export * from './core';\nexport * from './resources';\nexport * from './commands';\n\nexport * from './render-target';\nexport * from './render-context';\nexport * from './component';\n\nexport * from './single-threaded-renderer';\n\nimport { registerResourceType } from './core';\nimport { Program, Buffer } from './resources';\n\nregisterResourceType(Program);\nregisterResourceType(Buffer);\n"],"names":["root","factory","exports","module","define","amd","self","__webpack_require__","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","COMMAND_MAP","Command","def","name","Error","ResourceState","RESOURCE_MAP","registerResourceType","resource","resourceName","ResourceID","RESOURCE_ID_COUNTER","nextID","Instruction","type","id","state","UNLOADED","refcount","needsUpdate","load","writeData","protocol","writeUpdate","onUnload","this","renderer","mappedCommands","resources","Set","index","values","command","writeUInt8","MAP_COMMAND","writeString","commandProtocol","createWriter","RUN_COMMAND","submit","args","finish","STOP","commandData","flush","ADVANCE","advance","data","passData","loadResource","add","LOAD_ABORTED","LOADING","result","then","LOADED","LOAD_RESOURCE","writeUInt32","READY","UPDATE_RESOURCE","unloadResource","UNLOAD_RESOURCE","canvas","Map","gl","getContext","getResource","render","action","commandMap","Array","readUInt8","readUInt32","unload","delete","readString","set","update","commandName","IS_LITTLE_ENDIAN","Uint32Array","Uint8Array","buffer","shared","textEncoder","TextEncoder","str","encoded","encode","length","writeUInt8Array","writeFloat32","num","offset","allocate","writeView","setFloat32","writeFloat64","setFloat64","writeInt8","setInt8","writeInt16","setInt16","writeInt32","setInt32","setUint8","writeUInt16","setUint16","setUint32","writeFloat32Array","arr","i","size","writeFloat64Array","writeInt8Array","writeInt16Array","writeInt32Array","writeUInt16Array","writeUInt32Array","textDecoder","TextDecoder","getData","readUInt8Array","decode","readFloat32","prepareRead","readView","getFloat32","readFloat64","getFloat64","readInt8","getInt8","readInt16","getInt16","readInt32","getInt32","getUint8","readUInt16","getUint16","getUint32","readFloat32Array","amount","Float32Array","readBuffer","readFloat64Array","Float64Array","readInt8Array","Int8Array","readInt16Array","Int16Array","readInt32Array","Int32Array","readUInt16Array","Uint16Array","readUInt32Array","buffers","bufferIndex","ArrayBuffer","Math","max","push","byteLength","return","reset","allocator","ProtocolBufferAllocator","writeBuffers","writeOffset","writeBuffer","ArrayBufferProtocolWriter","align","DataView","newOffset","oldBuffers","ProtocolWriter","readBuffers","readBufferIndex","readOffset","receive","ProtocolReader","Buffer","updates","isShared","window","SharedArrayBuffer","byteView","notify","subarray","ResourceRef","sharedBuffer","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","STATIC_DRAW","updateNumber","bufferSubData","deleteBuffer","Resource","PREAMBLE","Program","JSON","stringify","parse","attributes","uniforms","vertexShaderSource","body","entries","map","_","join","createAttributes","createUniforms","fixIndent","createVertexShaderCode","vertexShader","fragmentShaderSource","createFragmentShaderCode","fragmentShader","createShader","VERTEX_SHADER","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","FRAGMENT_SHADER","program","createProgram","attachShader","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","location","getAttribLocation","getUniformLocation","deleteProgram","deleteShader","firstCharRegExp","lines","split","minIndent","Infinity","line","match","lineStart","min","slice","RenderContextID","RunProgram","instructor","options","programId","bufferId","console","log","ColoredTrianglesProgram","ProgramRef","color","position","context","zIndex","drawCallBatcher","DrawCallBatcher","rect","x","y","width","height","z","triangles","drawTriangles","programs","batchedPrograms","ID","batch","trianglesLength","float32BufferPool","writeMultiData","byteOffset","CONTEXT_ID_COUNTER","bufferPool","BufferPool","BufferPoolView","pool","multi","totalLength","ELEMENT_SIZE","BYTES_PER_ELEMENT","allocateSpace","currentBuffer","currentView","buffersIndex","currentBufferOffset","BufferRef","nextOffset","old","fn","renderTarget","RenderTarget","Instructor","RenderContext","protocolWriter","protocolReader","ArrayBufferProtocolReader","renderComponent","component","unloadComponent","CanvasRenderer"],"sourceRoot":""}